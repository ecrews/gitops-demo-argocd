#!/usr/bin/env bash
#
# Bootstraps Argo CD on a Kubernetes cluster.

set -e

GIT_ROOT_DIR="$(git rev-parse --show-toplevel)"

# Deploy Argo CD to the cluster.
kubectl create namespace argocd --dry-run -o yaml | kubectl apply -f -
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v1.5.4/manifests/install.yaml

# Install Argo Rollouts.
kubectl create namespace argo-rollouts --dry-run -o yaml | kubectl apply -f -
kubectl apply -n argo-rollouts -f https://raw.githubusercontent.com/argoproj/argo-rollouts/v0.8.2/manifests/install.yaml

# Wait for Argo CD to start.
kubectl -n argocd rollout status deployment/argocd-server

# Expose Argo CD API Server.
kubectl annotate --overwrite svc argocd-server -n argocd service.beta.kubernetes.io/aws-load-balancer-type="nlb"
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

# Wait for load balancer to become available.
hostname="$(kubectl get svc -n argocd argocd-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"

# Login using the CLI.
password="$(kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2)"
argocd login "${hostname}" --insecure --username admin --password "${password}"

# Add credentials for the private repository.
personal_access_token="$(cat ${HOME}/personal_access_token)"
argocd repo add https://github.com/ecrews/gitops-demo-argocd --username ecrews --password "${personal_access_token}"

# Create and sync parent app.
argocd app create apps \
    --dest-namespace argocd \
    --dest-server https://kubernetes.default.svc \
    --repo https://github.com/ecrews/gitops-demo-argocd.git \
    --path charts/apps

argocd app sync apps
